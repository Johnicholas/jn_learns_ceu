// Adapted from Rosetta Code: rosettacode.org/wiki/Dijkstra%27s_algorithm
native @nohold _assert();
native @nohold _printf();
native @nohold _fgets();
native @nohold _sscanf();

input void TICK;

native do
  // forward declaration
  typedef struct CEU_Node CEU_Node;
end

class Edge with
  var Node[] target; // node you would arrive at if you traversed this edge
  var float cost; // cost to traverse this edge
  var Edge[] sibling; // internal linked-list of edges leading out from the same node
do
  // nothing?
  await FOREVER;
end

class Node with
  var Edge[] out = null; // singly linked list of outgoing edges from this node
  var int name;
do
  // nothing?
  await FOREVER;
end

#define NODE_BY_NAME(search_target) \
    do loop (Node*)x in nodes do if x:name == search_target then escape x; end; end; escape null; end;


#define ADD_EDGE(a, b, c)  \
  do \
    var Node[] source = NODE_BY_NAME(a); \
    _assert(source); \
    var Node[] target = NODE_BY_NAME(b); \
    _assert(target); \
    var Edge[] new_edge = spawn Edge with \
      this.target = target; \
      this.cost = c; \
      this.sibling = source:out; \
    end; \
    source:out = new_edge; \
  end 


interface DijkstraContext with
  var DijkstraElem[] lead;
  var bool closed;
  event void tick;
  event void checkclosed;
end
 
class DijkstraElem with
  var Node[] n;
  var DijkstraElem[] via = null;
  var float cost; // total cost from origin node
  event void go_die;
  event void go_pop;
  var DijkstraContext& context;
do
  par/or do
    await go_die;
  with
    par/or do
      every context.tick do
        if context.lead == null or context.lead:cost > cost then
          context.lead = &this;
        end
      end
    with
      await go_pop;
    end
    
    _printf("path to %d found, cost is %f, in reverse is: ", n:name, cost);
    var DijkstraElem[] cursor = via;
    loop do
      if cursor == null then
        break;
      end
      _printf(" %d ", cursor:n:name);
      cursor = cursor:via;
    end
    _printf("\n");


    every context.checkclosed do
      if context.lead:n == n then
        context.closed = true;
      end
    end
  end
end

class Dijkstra with
  interface DijkstraContext;
  var Node[] start;
  event void tick;
  event void ok;
do
  par/or do
    every tick do
      lead = null;
    end
  with
    pool DijkstraElem[] heap;
    spawn DijkstraElem in heap with
      this.n = start;
      this.cost = 0.0;
      this.context = outer;
    end;
    loop do
      await tick;
      if lead == null then
        break;
      end
      closed = false;
      emit checkclosed;
      if closed then
        emit lead:go_die;
      else
        var Edge[] e = lead:n:out;
        loop do
          if e == null then
            break;
          end
          spawn DijkstraElem in heap with
            this.n = e:target;
            this.via = lead;
            this.cost = lead:cost + e:cost;
            this.context = outer;
          end;
          e = e:sibling;
        end
        emit lead:go_pop;
      end
    end
  end
  emit ok;
end

pool Node[] nodes;
#define MAXLINE 100
var char[MAXLINE] line;
var int n, m, start;

loop do
  if _fgets(line, MAXLINE, _stdin) == null then
    break;
  end

  if line[0] == 'c' or line[0] == '\n' or line[0] == '\0' then
    // skip
  else/if line[0] == 'p' and _sscanf(line, "%*c sp %d %d", &n, &m ) == 2 then
    loop i in n do
      spawn Node in nodes with
        this.name = i + 1;
      end;
    end
  else/if line[0] == 'a' then
    var int tail, head, length;
    _assert(_sscanf(line, "%*c %d %d %d", &tail, &head, &length ) == 3);
    ADD_EDGE(tail, head, length);
  else/if line[0] == 's' and _sscanf(line, "%*c %d", &start ) == 1 then
    var Node[] start_node = NODE_BY_NAME(start);
    var Dijkstra the_algorithm with
     this.start = start_node;
    end;
    par/or do
      every TICK do
        emit the_algorithm.tick;
      end
    with
      await the_algorithm.ok;
    end
  end
end

escape 0;

