native @nohold _SDL_DestroyWindow();
native @nohold _SDL_DestroyRenderer();
native @nohold _SDL_GetWindowSize();
native @nohold _SDL_CreateRenderer();
native @nohold _SDL_RenderPresent();
native @nohold _SDL_SetRenderDrawColor();
native @nohold _SDL_RenderFillRect();

input void SDL_REDRAW;
input void SDL_QUIT;
input int SDL_DT;

interface Kind with
  function (_SDL_Renderer*, int x, int y)=>void render_at;
  var float speed;
end
  
class SmallSquare with
  interface Kind;
  var int r;
  var int g;
  var int b;
do
  function (_SDL_Renderer* ren, int x, int y)=> void render_at do
    var _SDL_Rect rect;
    rect.x = x;
    rect.y = y;
    rect.w = 10;
    rect.h = 10;
    _SDL_SetRenderDrawColor(ren, r, g, b, 255);
    _SDL_RenderFillRect(ren, &rect);
  end
end

interface Animator with
  // create a named object from an object class at a location
  event (int, int, int) create;
  // destroy an object
  event int destroy;
  // move an object in a straight line to a destination
  event (int, int, int) move;
  // teleport an object to a location
  event (int, int, int) place; 
end

class Object with
  var Animator& context;
  var Kind& kind;
  var int objid;
  var float x;
  var float y;
  var _SDL_Renderer[] ren;
do
  par/or do
    var int incoming_id = await context.destroy until incoming_id == objid;
  with
    every SDL_REDRAW do
     kind.render_at(ren, x, y);
    end
  with
    loop do
      var int incoming_id, dest_x, dest_y;
      (incoming_id, dest_x, dest_y) = await context.move until incoming_id == objid;
      var int delta;
      every delta in SDL_DT do
        var int dx = dest_x - x;
        var int dy = dest_y - y;
        var float f = (kind.speed * delta) / _sqrt(dx * dx + dy * dy);
        if f < 1 then
          x = x + dx * f;
          y = y + dy * f;
        else
          x = dest_x;
          y = dest_y;
          break;
        end
      end
    end
  with
    loop do
      var int incoming_id, new_x, new_y;
      (incoming_id, new_x, new_y) = await context.place until incoming_id == objid;
      x = new_x;
      y = new_y;
    end
  end
end

class SDLAnimator with
  interface Animator;
  event void ok;
do
  var _SDL_Window* win;
  finalize
    win = _SDL_CreateWindow("Animator", 500, 400, 800, 600, _SDL_WINDOW_SHOWN);
  with
    _SDL_DestroyWindow(win);
  end
  var int ren_w;
  var int ren_h;
  _SDL_GetWindowSize(win, &ren_w, &ren_h);
  var _SDL_Renderer[] ren;
  finalize
    ren = _SDL_CreateRenderer(win, -1, 0);
  with
    _SDL_DestroyRenderer(ren);
  end

  par/or do
    await SDL_QUIT;
  with
    var _SDL_Rect r;
    r.x = 0;
    r.y = 0;
    r.w = ren_w;
    r.h = ren_h;
    every SDL_REDRAW do
      _SDL_SetRenderDrawColor(ren, 0, 0, 0, 255); // black
      _SDL_RenderFillRect(ren, &r);
    end
  with
    var SmallSquare red with
      this.r = 255;
      this.g = 0;
      this.b = 0;
      this.speed = 0.1;
    end;

    pool Object[] objects;
    loop do
      var int id, x, y;
      (id, x, y) = await create;
      spawn Object in objects with
        this.context = outer;
        this.kind = red;
        this.objid = id;
        this.x = x;
        this.y = y;
        this.ren = ren;
      end;
    end
  with
    every SDL_REDRAW do
      _SDL_RenderPresent(ren);
    end
  end
end

