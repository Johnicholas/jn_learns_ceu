input int REMOTE_WORKER_DONE;
input int USER_TASK;
native @plain _Queue;
native @nohold _init();
native @nohold _push();
native @nohold _empty();
native @nohold _pop();
native @nohold _assert();

interface WorkerContext with
  var bool handled;
  event int internal_task;
  var _Queue queue;
end

class Worker with
  var WorkerContext& context;
  var int id;
do
  loop do
    var int details = await context.internal_task until not context.handled;
    context.handled = true;
    loop do
      _start_remote_task(details, id);
      var int reply_to = await REMOTE_WORKER_DONE until reply_to == id;
      if _empty(&context.queue) then
        break;
      else
        details = _pop(&context.queue);
      end
    end
  end
end
  
class Manager with
  interface WorkerContext;
do
  _init(&queue);
  par do
    // intercede between USER_TASK and internal_task, setting handled
    var int details;
    every details in USER_TASK do
      handled = false;
      emit internal_task => details;
    end
  with
    pool Worker[3] ws;
    loop i in 3 do
      spawn Worker in ws with
        this.context = outer;
        this.id = i;
      end;
    end
    // If no worker is idle, we handle the task by pushing it into the queue.
    // One of the workers will eventually pick it up.
    loop do
      var int details = await internal_task until not handled;
      _push(&queue, details);
    end
  end
end

var Manager m;
await FOREVER;

