input int REMOTE_WORKER_DONE;
input int USER_TASK;
native @plain _Queue;
native @nohold _init();
native @nohold _push();
native @nohold _empty();
native @nohold _pop();
native @nohold _assert();

class Channel with
  event void done;
do
  // nothing
end

class Worker with
  var Channel& done_channel;
  var int details;
  var int id;
do
  _printf("Worker starts a remote task working on %d\n", details);
  var int reply_to;
  loop do
    reply_to = await REMOTE_WORKER_DONE;
    if reply_to == id then
      break;
    end
  end
  _printf("Worker done with task, looking for new task\n");
  emit done_channel.done;
end

class ResourceManager with
  event int go_task;
do
  var Channel c;
  pool Worker[6] resources;
  var int nextid = 0;
  var _Queue queue;
  _init(&queue);

  par do
    var int details;
    every details in this.go_task do
      var Worker* foo = spawn Worker in resources with
        this.id = nextid + 1;
        this.details = details;
        this.done_channel = c;
      end;
      if foo then
        nextid = nextid + 1;
      else
        _printf("All workers are unavailable, so ResourceManager stores the task in a queue\n");
        _push(&queue, details);
      end;
    end
  with
    every c.done do
      if not _empty(&queue) then
        _printf("ResourceManager sees something is done and queue is nonempty, so starting work on something\n");
        var Worker* foo = spawn Worker in resources with
          this.id = nextid;
          this.details = _pop(&queue);
          this.done_channel = c;
        end;
        _assert(foo);
        nextid = nextid + 1;
      else
        _printf("ResourceManager sees something is done and queue is empty, so something is now idle\n");
      end
    end
  end
end

var ResourceManager r;

var int details;
every details in USER_TASK do
  emit r.go_task => details;
end

