input int REMOTE_WORKER_DONE;
input int USER_TASK;
native @plain _Queue;
native @nohold _init();
native @nohold _push();
native @nohold _empty();
native @nohold _pop();

interface Worker with
  event int go_task;
  event void ok_done;
end

class ResourceManager with
  event int go_task;
  var Worker& a;
  var Worker& b;
do
  var _Queue queue;
  _init(&queue);

  var bool a_idle = true;
  var bool b_idle = true;

  par do
    var int details;
    every details in this.go_task do
      if a_idle then
        _printf("ResourceManager delegates to A\n");
        emit a.go_task => details;
        a_idle = false;
      else/if b_idle then
        _printf("ResourceManager delegates to B\n");
        emit b.go_task => details;
        b_idle = false;
      else
        _printf("All workers are unavailable, so ResourceManager stores the task in a queue\n");
        _push(&queue, details);
      end;
    end
  with
    every a.ok_done do
      if not _empty(&queue) then
        _printf("ResourceManager sees A is done and queue is nonempty, starting A working on something\n");
        emit a.go_task => _pop(&queue);
      else
        _printf("ResourceManager sees A is done and queue is empty, so A is now idle\n");
        a_idle = true;
      end
    end
  with
    every b.ok_done do
      if not _empty(&queue) then
        _printf("ResourceManager sees B is done and queue is nonempty, starting B working on something\n");
        emit b.go_task => _pop(&queue);
      else
        _printf("ResourceManager sees B is done and queue is empty, so B is now idle\n");
        b_idle = true;
      end
    end
  end
end

class MockWorker with
  interface Worker;
  var int id;
do
  var int details;
  every details in this.go_task do
    _printf("MockWorker #%d starts a remote task working on %d\n", id, details);
    var int reply_to;
    every reply_to in REMOTE_WORKER_DONE do
      if reply_to == id then
        break; // out of inner, reply_to, loop
      end
    end
    _printf("MockWorker #%d done with task, looking for new task\n", id);
    emit this.ok_done;
  end
end

var MockWorker one with
  this.id = 1;
end;
var MockWorker two with
  this.id = 2;
end;
var ResourceManager r with
  this.a = one;
  this.b = two;
end;

var int details;
every details in USER_TASK do
  emit r.go_task => details;
end

