input int REMOTE_WORKER_DONE;
input int USER_TASK;
native @plain _Queue;
native @nohold _init();
native @nohold _push();
native @nohold _empty();
native @nohold _pop();
native @nohold _assert();

var _Queue queue;
_init(&queue);
var int assigned = 0;
var int handled = 0;
event int internal_task;

par do
  // intercede between USER_TASK and internal_task, incrementing assigned
  var int details;
  every details in USER_TASK do
    assigned = assigned + 1;
    emit internal_task => details;
  end
with
  // worker 1
  loop do
    var int details = await internal_task until assigned > handled;
    // prevent other workers from taking this task by incrementing handled
    handled = handled + 1;
    loop do
      _start_remote_task(details, 1);
      var int reply_to = await REMOTE_WORKER_DONE until reply_to == 1;
      if _empty(&queue) then
        break;
      else
        details = _pop(&queue);
      end
    end
  end
with
  // worker 2
  loop do
    var int details = await internal_task until assigned > handled;
    handled = handled + 1;
    loop do
      _start_remote_task(details, 2);
      var int reply_to = await REMOTE_WORKER_DONE until reply_to == 2;
      if _empty(&queue) then
        break;
      else
        details = _pop(&queue);
      end
    end
  end
with
  // worker 3
  loop do
    var int details = await internal_task until assigned > handled;
    handled = handled + 1;
    loop do
      _start_remote_task(details, 3);
      var int reply_to = await REMOTE_WORKER_DONE until reply_to == 3;
      if _empty(&queue) then
        break;
      else
        details = _pop(&queue);
      end
    end
  end
with
  // if no worker is idle, handle the task by pushing it into the queue 
  loop do
    var int details = await internal_task until assigned > handled;
    handled = handled + 1;
    _push(&queue, details);
  end
end

