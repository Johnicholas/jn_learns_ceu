
native do
  typedef struct CEU_T CEU_T;
  typedef struct {
    struct CEU_T** backing;
    int size;
  } heap;

  void insert(heap* container, CEU_T* elem);
  void deletemin(heap* container);
end
native @plain _heap;
native _insert();
native _deletemin();

input void TICK;

class T with
  var int cost;
  event void go_kill;
do
  await go_kill;
end

#define INSERT(HEAP, COST) \
  do \
    var T[] newt = spawn T in thepool with \
      this.cost = COST; \
    end; \
    _insert(&HEAP, newt) finalize with /* nothing? */ end; \
  end

#define DELETEMIN(HEAP) \
  do \
    var T[] front = HEAP.backing[1]; \
    emit front:go_kill; \
    _deletemin(&HEAP) finalize with /* nothing? */ end; \
  end

pool T[] thepool;
var _heap foo;
foo.backing = null;
var T[] initial = spawn T with
  this.cost = 123456;
end;
_sb_push(foo.backing, initial) finalize with /* nothing? */ end;
foo.size = 0;

#define BIG 100

loop i in BIG do
  if _rand()%(BIG-i) > foo.size then
    var int to_insert = _rand() % 1000;
    _printf("insert %03d\n", to_insert);
    INSERT(foo, to_insert);
  else/if foo.size > 0 then
    var T[] front = foo.backing[1];
    _printf("pop    %03d\n", front:cost);
    DELETEMIN(foo);
  end
end


escape 0;

