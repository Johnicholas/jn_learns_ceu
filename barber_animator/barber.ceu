#include "sdl_animator.ceu"

native do
  #include <assert.h>

  int random_plusminus(int center, int plusminus) {
    return center - plusminus + rand() % (plusminus * 2);
  }
end

native @nohold _assert();

#define SYNC(r) \
  if r.waiting then r.waiting = false; emit r.ready; else r.waiting = true; await r.ready; end

class Rendesvous with
  function (void)=>bool client_volunteers;
  function (int, int)=>bool server_volunteers;
  var bool waiting = false;
  event void ready;
  event void over;
  function (void)=>bool was_accepted;
  var int x = 50;
  var int y = 50;
do
  var bool need_client = true;
  var bool need_server = true;

  function (void)=>bool client_volunteers do
    if need_client then
      need_client = false;
      return true;
    else
      return false;
    end
  end
  
  function (int new_x, int new_y)=>bool server_volunteers do
    if need_server then
      need_server = false;
      x = new_x;
      y = new_y;
      return true;
    else
      return false;
    end
  end

  function (void)=>bool was_accepted do
    return not need_client and not need_server;
  end
end

class Queue with
  event Rendesvous* next;
do
  // nothing
end

class Barber with
  var Kind& kind;
  var _SDL_Renderer[] ren;
  var int id;
  var Queue& customers;
do
  var int x = 200+25*id;
  var int y = 500;
  var Object rep with
    this.kind = kind;
    this.ren = ren;
    this.x = x;
    this.y = y;
    this.destx = x;
    this.desty = y;
  end;

  loop do
    await 1ms; // TODO: fix

    // try to get a client
    var Rendesvous r;
    var Rendesvous[] rptr = null;
    r.server_volunteers(x, y-15);
    emit customers.next => &r;
    if r.was_accepted() then
      rptr = &r;
    else
      rptr = await customers.next until rptr:server_volunteers(x, y-15);
    end

    watching rptr do
      SYNC((*rptr));
      // step forward to meet the client
      var int count = 0;
      emit rep.go_move => (&count, x, y-10);
      _assert(count == 1);
      await rep.ok_moved;
      await (_random_plusminus(30, 6))s;
      emit rptr:over;
    end

    // step back and clean up the station
    var int count = 0;
    emit rep.go_move => (&count, x, y);
    _assert(count == 1);
    await rep.ok_moved;
  end
end

class Chair with
  var Kind& kind;
  var _SDL_Renderer[] ren;
  var int id;
  var Queue& customers;
do
  var Object rep with
    this.kind = kind;
    this.ren = ren;
    this.x = 780;
    this.y = 10+25*id;
    this.destx = 780;
    this.desty = 10+25*id;
  end;

  loop do
    await 1ms; // TODO: fix
    // when a client asks for a server, volunteer self
    var Rendesvous[] rptr = null;
    loop do
      rptr = await customers.next;
      if rptr:server_volunteers(765, rep.y) then
        break;
      end
    end

    // as they sit down, the chair moves forward a little bit.
    watching rptr do
      SYNC((*rptr));
      var int count = 0;
      emit rep.go_move => (&count, 770, rep.y);
      _assert(count == 1);
      par/and do
        await rep.ok_moved;
      with
        await rptr:over;
      end
    end

    // as they stand up, the chair moves backward a little bit.
    await 1ms; // TODO: fix
    var int count = 0;
    emit rep.go_move => (&count, 780, rep.y);
    _assert(count == 1);
    await rep.ok_moved;
  end
end

class Customer with
  var Queue& barbers;
  var Queue& chairs;
  var Kind& kind;
  var _SDL_Renderer[] ren;
  var int id;
do
  // enter stage left
  var Object rep with
    this.kind = kind;
    this.ren = ren;
    this.x = 400;
    this.y = 10;
    this.destx = 400;
    this.desty = 10;
  end;
  await 1ms; // TODO: fix
  // try to get a barber
  var Rendesvous r;
  var Rendesvous[] rptr = null;
  r.client_volunteers();
  emit barbers.next => &r;
  if r.was_accepted() then
    rptr = &r;
  else
    var Rendesvous chair_r;
    chair_r.client_volunteers();
    emit chairs.next => &chair_r;
    if chair_r.was_accepted() then
      par/or do
        // when a client asks for a server, volunteer self
        rptr = await barbers.next until rptr:client_volunteers();
      with
        var int count = 0;
        emit rep.go_move => (&count, chair_r.x, chair_r.y);
        _assert(count == 1);
        await rep.ok_moved;
        SYNC(chair_r);
        await FOREVER;
      end
      if chair_r.waiting then
        emit chair_r.ready;
        _printf("not waiting\n"); // await 1ms; // TODO: necessary?
      end
      emit chair_r.over;
    else
      // balk
    end
  end

  if rptr and rptr:was_accepted() then
    var int count = 0;
    emit rep.go_move => (&count, rptr:x, rptr:y);
    _assert(count == 1);
    await rep.ok_moved;
    SYNC((*rptr));
    await rptr:over;
  end

  // leave
  await 1ms; // TODO: fix
  var int count = 0;
  emit rep.go_move => (&count, 10, 300);
  _assert(count == 1);
  await rep.ok_moved;
end

