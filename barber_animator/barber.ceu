#include "animator.ceu"

native do
  #include <assert.h>

  int random_plusminus(int center, int plusminus) {
    return center - plusminus + rand() % (plusminus * 2);
  }

  typedef struct {
    int total_pushed;
    int total_popped;
    int buffer[1024]; // 1024 is basically infinity
  } Queue;

  void set_empty_queue(Queue* q) {
    int i;

    q->total_pushed = 0;
    q->total_popped = 0;
    for (i = 0; i < 1024; i += 1) {
      q->buffer[i] = 0;
    }
  }

  int empty(Queue* q) {
    return q->total_pushed == q->total_popped;
  }

  void push(Queue* q, int value) {
    q->buffer[q->total_pushed++] = value;
  }

  int pop(Queue* q) {
    return q->buffer[q->total_popped++];
  }

  typedef struct {
    int count_allocated;
    int allocated[10];
  } Storage;

  void set_empty_storage(Storage* f) {
    int i;

    f->count_allocated = 0;
    for (i = 0; i < 10; i += 1) {
      f->allocated[i] = 0;
    }
  }

  int full(Storage* f) {
    return f->count_allocated >= 10;
  }

  int enter(Storage* f) {
    int i;
    assert(!full(f));
    for (i = 0; i < 10; i += 1) {
      if (!f->allocated[i]) {
        f->allocated[i] = 1;
        f->count_allocated += 1;
        return i;
      }
    }
    assert(0);
  }

  void leave(Storage* f, int which) {
    assert(f->count_allocated > 0);
    assert(f->allocated[which]);
    f->count_allocated -= 1;
    f->allocated[which] = 0;
  }
end

native _random_plusminus();

native @plain _Queue;
native @nohold _set_empty_queue();
native @nohold _push();
native @nohold _empty();
native @nohold _pop();

native @plain _Storage;
native @nohold _set_empty_storage();
native @nohold _full();
native @nohold _enter();
native @nohold _leave();

class Barber with
  var _Queue queue;
  var _Storage storage;
  event int next;
  var bool idle = true;
  function (void)=>int get_next_id;
do
  _set_empty_queue(&queue);
  _set_empty_storage(&storage);
  var int next_id = 1;
  function (void)=>int get_next_id do
    next_id = next_id + 1;
    return next_id - 1;
  end
end

class HangCoat with
  var Animator& animator;
  var int id;
  event void ok;
do
  await 1ms; // TODO: this is a hack, fix it
  emit animator.move => (id, 400, 10);
  await 2s;
  emit animator.place => (id, 400, 10);
  emit ok;
end

class Haircut with
  var Animator& animator;
  var int id;
  var Barber& barber;
  event void ok;
do
  await 2ms; // TODO: this is a hack, fix it
  emit animator.move => (id, 400, 300);
  await (_random_plusminus(15, 3))s;
  if _empty(&barber.queue) then
    barber.idle = true;
  else
    emit barber.next => _pop(&barber.queue);
  end
  emit ok;
end

class Depart with
  var Animator& animator;
  var int id;
  event void ok;
do
  await 1ms; // TODO: this is a hack, fix it
  emit animator.move => (id, 10, 580);
  await 2s;
  emit animator.destroy => id;
  emit ok;
end

class Customer with
  var Barber& barber;
  var Animator& animator;
do
  var int id = barber.get_next_id();
  emit animator.create => (id, 10, 10);
  if barber.idle then
    barber.idle = false;
    var HangCoat hang_coat with
      this.animator = animator;
      this.id = id;
    end;
    _printf("customer %d hanging up their coat\n", id);
    await hang_coat.ok;
    _printf("customer %d hung up their coat\n", id);
    var Haircut haircut with
      this.animator = animator;
      this.id = id;
      this.barber = barber;
    end;
    _printf("customer %d getting a haircut\n", id);
    await haircut.ok;
    _printf("customer %d got a haircut\n", id);
    var Depart depart with
      this.animator = animator;
      this.id = id;
    end;
    _printf("customer %d leaving happily\n", id);
    await depart.ok;
    _printf("customer %d done leaving\n", id);
  else/if _full(&barber.storage) then
    var Depart depart with
      this.animator = animator;
      this.id = id;
    end;
    _printf("customer %d leaving in a huff\n", id);
    await depart.ok;
    _printf("customer %d done leaving\n", id);
  else
    var int which_seat = _enter(&barber.storage);
    _push(&barber.queue, id);
    par/or do
      var int next = await barber.next until next == id;
    with
      var HangCoat hang_coat with
        this.animator = animator;
        this.id = id;
      end;
      _printf("customer %d hanging up their coat\n", id);
      await hang_coat.ok;
      // sit down
      _printf("customer %d sitting down in seat %d\n", id, which_seat);
      await 1ms; // TODO: this is a hack, fix it
      emit animator.move => (id, 780, 10+25*which_seat);
      await FOREVER;
    end
    _leave(&barber.storage, which_seat);
    var Haircut haircut with
      this.animator = animator;
      this.id = id;
      this.barber = barber;
    end;
    _printf("customer %d getting their hair cut\n", id);
    await haircut.ok;
    _printf("customer %d done getting their hair cut\n", id);
    var Depart depart with
      this.animator = animator;
      this.id = id;
    end;
    _printf("customer %d leaving happily\n", id);
    await depart.ok;
    _printf("customer %d done leaving\n", id);
  end
end

