#include "sdl_animator.ceu"

native do
  #include <assert.h>

  int random_plusminus(int center, int plusminus) {
    return center - plusminus + rand() % (plusminus * 2);
  }
end

native @nohold _assert();
native _random_plusminus();

class Storage with
  var int count_allocated = 0;
  var bool[10] allocated;
  function (void)=>int enter;
  function (int)=>void leave;
do
  function (void)=>int enter do
    _assert(count_allocated < 10);
    loop i in 10 do
      if not allocated[i] then
        allocated[i] = true;
        count_allocated = count_allocated + 1;
        return i;
      end
    end
  end

  function (int i)=>void leave do
    count_allocated = count_allocated - 1;
    allocated[i] = false;
  end

  loop i in 10 do
    allocated[i] = false;
  end
end

class Queue with
  event void next;
do
  // nothing
end

class Customer with
  var Storage& chairs;
  var Storage& barbers;
  var Queue& barber;
  var Kind& kind;
  var _SDL_Renderer[] ren;
do
  if chairs.count_allocated >= 10 then
    // balk
    var Object rep with
      this.kind = kind;
      this.ren = ren;
      this.x = 10;
      this.y = 10;
      this.destx = 10;
      this.desty = 580;
    end;
    await 2s;
  else/if barbers.count_allocated < 10 and chairs.count_allocated == 0 then
    // get a haircut without a wait
    var int which_barber = barbers.enter();
    var Object rep with
      this.kind = kind;
      this.ren = ren;
      this.x = 10;
      this.y = 10;
      this.destx = 400;
      this.desty = 10;
    end;
    await 2s;
    emit rep.move => (400 + 25 * which_barber, 300);
    await (_random_plusminus(30000, 6000))ms;
    barbers.leave(which_barber);
    emit barber.next;
    _assert(rep.x == 400 + 25 * which_barber);
    _assert(rep.y == 300);
    emit rep.move => (10, 580);
    await 2s;
  else
    // wait for a haircut
    var int which_seat = chairs.enter();
    var int ahead = chairs.count_allocated;
    var Object rep with
      this.kind = kind;
      this.ren = ren;
      this.x = 10;
      this.y = 10;
      this.destx = 400;
      this.desty = 10;
    end;
    par/or do
      loop i in ahead do
         await barber.next;
      end
      _assert(barbers.count_allocated < 10);
    with
      await 2s;
      emit rep.move => (780, 10+25*which_seat);
      await FOREVER;
    end
    chairs.leave(which_seat);
    var int which_barber = barbers.enter();
    emit rep.move => (400 + 25 * which_barber, 300);
    await (_random_plusminus(30000, 6000))ms;
    barbers.leave(which_barber);
    emit barber.next;
    emit rep.move => (10, 580);
    await 2s;
  end
end

