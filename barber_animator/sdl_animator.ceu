#include "animator.ceu"

native @nohold _SDL_DestroyWindow();
native @nohold _SDL_DestroyRenderer();
native @nohold _SDL_GetWindowSize();
native @nohold _SDL_CreateRenderer();
native @nohold _SDL_RenderPresent();
native @nohold _SDL_SetRenderDrawColor();
native @nohold _SDL_RenderFillRect();

input void SDL_REDRAW;
input void SDL_QUIT;
input int SDL_DT;

interface Kind with
  function (_SDL_Renderer*, int x, int y)=>void render_at;
  var float speed;
end
  
class SmallSquare with
  interface Kind;
  var int r;
  var int g;
  var int b;
do
  function (_SDL_Renderer* ren, int x, int y)=> void render_at do
    var _SDL_Rect rect;
    rect.x = x;
    rect.y = y;
    rect.w = 10;
    rect.h = 10;
    _SDL_SetRenderDrawColor(ren, r, g, b, 255);
    _SDL_RenderFillRect(ren, &rect);
  end
end

class Object with
  var Animator& context;
  var Kind& kind;
  var int id;
  var float x;
  var float y;
  var int destx;
  var int desty;
  var _SDL_Renderer[] ren;
do
  par/or do
    var int id = await context.destroy until id == this.id;
  with
    every SDL_REDRAW do
      kind.render_at(ren, x, y);
    end
  with
    loop do
      par/or do
        var int id, new_x, new_y;
        (id, new_x, new_y) = await context.place until id == this.id;
        if x != new_x or y != new_y then
          _printf("warning: place %d %d %d is teleporting\n", id, new_x, new_y);
        end
        x = new_x;
        y = new_y;
        destx = new_x;
        desty = new_y;
      with
        var int id, new_x, new_y, new_destx, new_desty;
        (id, new_x, new_y, new_destx, new_desty) = await context.place_and_move until id == this.id;
        if x != new_x or y != new_y then
          _printf("warning: place_and_move %d %d %d %d %d is teleporting\n", id, new_x, new_y, new_destx, new_desty);
        else
          _printf("object %d saw place_and_move %d %d %d %d\n", id, new_x, new_y, new_destx, new_desty);
        end
        x = new_x;
        y = new_y;
        destx = new_destx;
        desty = new_desty;
      with
        if destx == x and desty == y then
          var int id, new_destx, new_desty;
          (id, new_destx, new_desty) = await context.move until id == this.id;
          destx = new_destx;
          desty = new_desty;
        else
          var int delta;
          every delta in SDL_DT do
            var int dx = destx - x;
            var int dy = desty - y;
            var float f = (kind.speed * delta) / _sqrt(dx * dx + dy * dy);
            if f < 1 then
              x = x + dx * f;
              y = y + dy * f;
            else
              x = destx;
              y = desty;
              break; // out of every delta in SDL_DT
            end
          end
        end
      end
    end
  end
end

class SDLAnimator with
  interface Animator;
  event void ok;
do
  var _SDL_Window* win;
  finalize
    win = _SDL_CreateWindow("Animator", 500, 400, 800, 600, _SDL_WINDOW_SHOWN);
  with
    _SDL_DestroyWindow(win);
  end
  var int ren_w;
  var int ren_h;
  _SDL_GetWindowSize(win, &ren_w, &ren_h);
  var _SDL_Renderer[] ren;
  finalize
    ren = _SDL_CreateRenderer(win, -1, 0);
  with
    _SDL_DestroyRenderer(ren);
  end

  par/or do
    await SDL_QUIT;
  with
    var _SDL_Rect r;
    r.x = 0;
    r.y = 0;
    r.w = ren_w;
    r.h = ren_h;
    every SDL_REDRAW do
      _SDL_SetRenderDrawColor(ren, 0, 0, 0, 255); // black
      _SDL_RenderFillRect(ren, &r);
    end
  with
    var SmallSquare red with
      this.r = 255;
      this.g = 0;
      this.b = 0;
      this.speed = 2;
    end;

    pool Object[] objects;
    par do
      loop do
        var int id, x, y;
        (id, x, y) = await create_stationary;
        spawn Object in objects with
          this.context = outer;
          this.kind = red;
          this.id = id;
          this.x = x;
          this.y = y;
          this.destx = x;
          this.desty = y;
          this.ren = ren;
        end;
      end
    with
      loop do
        var int id, startx, starty, destx, desty;
        (id, startx, starty, destx, desty) = await create_moving;
        spawn Object in objects with
          this.context = outer;
          this.kind = red;
          this.id = id;
          this.x = startx;
          this.y = starty;
          this.destx = destx;
          this.desty = desty;
          this.ren = ren;
        end;
      end
    end
  with
    every SDL_REDRAW do
      _SDL_RenderPresent(ren);
    end
  end
end

