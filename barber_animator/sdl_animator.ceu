native @nohold _SDL_DestroyWindow();
native @nohold _SDL_DestroyRenderer();
native @nohold _SDL_GetWindowSize();
native @nohold _SDL_CreateRenderer();
native @nohold _SDL_RenderPresent();
native @nohold _SDL_SetRenderDrawColor();
native @nohold _SDL_RenderFillRect();

input void SDL_REDRAW;
input void SDL_QUIT;
input int SDL_DT;

interface Kind with
  function (_SDL_Renderer*, int x, int y)=>void render_at;
  var float speed;
end
  
class SmallSquare with
  interface Kind;
  var int r;
  var int g;
  var int b;
do
  function (_SDL_Renderer* ren, int x, int y)=> void render_at do
    var _SDL_Rect rect;
    rect.x = x;
    rect.y = y;
    rect.w = 10;
    rect.h = 10;
    _SDL_SetRenderDrawColor(ren, r, g, b, 255);
    _SDL_RenderFillRect(ren, &rect);
  end
end

class Object with
  var Kind& kind;
  var float x;
  var float y;
  var int destx;
  var int desty;
  var _SDL_Renderer[] ren;
  event (int*, int, int) go_place; // place this object at a location
  event (int*, int, int) go_move; // move this to a location
  event void ok_moved;
do
  par do
    every SDL_REDRAW do
      kind.render_at(ren, x, y);
    end
  with
    loop do
      var int* count = null;
      (count, x, y) = await go_place;
      *count = *count + 1;
    end
  with
    loop do
      var int* count = null;
      (count, destx, desty) = await go_move;
      *count = *count + 1;
    end
  with
    var int delta;
    every delta in SDL_DT do
      if destx != x or desty != y then
        var int dx = destx - x;
        var int dy = desty - y;
        var float f = (kind.speed * delta) / _sqrt(dx * dx + dy * dy);
        if f < 1 then
          x = x + dx * f;
          y = y + dy * f;
        else
          x = destx;
          y = desty;
          emit ok_moved;
        end
      end
    end
  end
end

