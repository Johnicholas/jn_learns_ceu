native @nohold _SDL_DestroyWindow();
native @nohold _SDL_DestroyRenderer();
native @nohold _SDL_GetWindowSize();
native @nohold _SDL_CreateRenderer();
native @nohold _SDL_RenderPresent();
native @nohold _SDL_SetRenderDrawColor();
native @nohold _SDL_RenderFillRect();

input void SDL_REDRAW;
input void SDL_QUIT;
input int SDL_DT;

interface Kind with
  function (_SDL_Renderer*, int x, int y)=>void render_at;
  var float speed;
end
  
class SmallSquare with
  interface Kind;
  var int r;
  var int g;
  var int b;
do
  function (_SDL_Renderer* ren, int x, int y)=> void render_at do
    var _SDL_Rect rect;
    rect.x = x;
    rect.y = y;
    rect.w = 10;
    rect.h = 10;
    _SDL_SetRenderDrawColor(ren, r, g, b, 255);
    _SDL_RenderFillRect(ren, &rect);
  end
end

class Object with
  var Kind& kind;
  var float x;
  var float y;
  var int destx;
  var int desty;
  var _SDL_Renderer[] ren;
  event void destroy; // destroy this object
  event (int, int) place; // place this object at a location
  event (int, int) move; // move this to a location
do
  par/or do
    await destroy;
  with
    every SDL_REDRAW do
      kind.render_at(ren, x, y);
    end
  with
    loop do
      par/or do
        var int new_x, new_y;
        (new_x, new_y) = await place;
        if x != new_x or y != new_y then
          _printf("warning: place %d %d is teleporting\n", new_x, new_y);
        end
        x = new_x;
        y = new_y;
        destx = new_x;
        desty = new_y;
      with
        if destx == x and desty == y then
          var int new_destx, new_desty;
          (new_destx, new_desty) = await move;
          destx = new_destx;
          desty = new_desty;
        else
          var int delta;
          every delta in SDL_DT do
            var int dx = destx - x;
            var int dy = desty - y;
            var float f = (kind.speed * delta) / _sqrt(dx * dx + dy * dy);
            if f < 1 then
              x = x + dx * f;
              y = y + dy * f;
            else
              x = destx;
              y = desty;
              break; // out of every delta in SDL_DT
            end
          end
        end
      end
    end
  end
end

