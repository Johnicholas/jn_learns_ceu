// This is a port of Steven Fuerst's obfuscated, 512-byte roguelike "Monster Cave"
input void DRAW;
input char UPDATE;

native @nohold _draw_screen();
native @nohold _path_screen();

#define ROWS 24
var int rows = ROWS;
#define COLS 80
var int cols = COLS;
var int rooms = 50;
#define MONSTERS 10
var int monsters = MONSTERS;
var int stair_row;
var int stair_col;

var char[ROWS*COLS] map;
var int[MONSTERS+1] loc_row;
var int[MONSTERS+1] loc_col;
var int[MONSTERS+1] hp;

function @rec (void)=>void setup do
  loop row in ROWS do
    loop col in COLS do
      map[row*COLS+col] = '#';
    end
  end
  
  // make a messy cave by opening out a lot of rectangles
  loop i in rooms do
    var int height = _rand_between(3, 6);
    var int width = _rand_between(1, 25);
    var int top = _rand_between(1, ROWS - height - 1);
    var int left = _rand_between(1, COLS - width - 1);
    var int bottom = top + height;
    var int right = left + width;
    loop row in height do
      loop col in width do
        map[(row+top)*COLS+(left+col)] = '.';
      end
    end
  end
  
  // place entities (player and monsters)
  loop i in MONSTERS+1 do
    loop do
      var int row = _rand_between(1, ROWS-1);
      var int col = _rand_between(1, COLS-1);
      if map[row*COLS+col] == '.' then
        loc_row[i] = row;
        loc_col[i] = col;
        if i == 0 then
          // the player
          map[row*COLS+col] = '@';
          hp[i] = 5;
        else
          // a monster
          map[row*COLS+col] = 'M';
          hp[i] = 2;
        end
        break;
      end
    end
  end
  
  // place the stairway
  loop do
    var int row = _rand_between(1, ROWS-1);
    var int col = _rand_between(1, COLS-1);
    if map[row*COLS+col] == '.' then
      map[row*COLS+col] = '>';
      stair_row = row;
      stair_col = col;
      break;
    end
  end
end

call/rec setup();

par/or do
  every DRAW do
    _draw_screen(map, rows, cols);
    // put the cursor on the player
    _move(loc_row[0], loc_col[0]);
  end
with
  loop do
    var int key = await UPDATE until key != _ERR;
    loop i in MONSTERS+1 do
      var int oldrow = loc_row[i];
      var int newrow = oldrow;
      var int oldcol = loc_col[i];
      var int newcol = oldcol;
      if i == 0 then
        // move the player
        if key == 'w' then
          newrow = newrow - 1;
        else/if key == 'a' then
          newcol = newcol - 1;
        else/if key == 's' then
          newrow = newrow + 1;
        else/if key == 'd' then
          newcol = newcol + 1;
        end
        if map[newrow*COLS+newcol] == '>' then
          // going down is just like starting over! :P
          call/rec setup();
          break;
        end
        loop j in MONSTERS do
          // something
        end
      else
        if hp[i] > 0 then
          // move a monster
          newrow = newrow + _rand_between(0, 3) - 1;
          newcol = newcol + _rand_between(0, 3) - 1;
          if newrow == loc_row[0] and newcol == loc_col[0] then
            // monster stepped on the player
            hp[0] = hp[0] - 1;
            if hp[0] == 0 then
              // monster killed the player
              break;
            end
          end
        end
       end

      // regardless, if an entity moved, the map needs to be updated
      if map[newrow*COLS+newcol] == '.' or map[newrow*COLS+newcol] == '_' then
        loc_row[i] = newrow;
        loc_col[i] = newcol;
        map[newrow*COLS+newcol] = map[oldrow*COLS+oldcol];
        map[oldrow*COLS+oldcol] = '.';
      end
    end
    if hp[0] == 0 then
      // player is dead
      break;
    end
    _path_screen(map, rows, cols, loc_row[0], loc_col[0], stair_row, stair_col);
  end
end

escape 0;
